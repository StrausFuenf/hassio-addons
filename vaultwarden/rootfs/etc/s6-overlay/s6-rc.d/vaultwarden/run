#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Vaultwarden
# Runs the Vaultwarden server
# ==============================================================================
declare admin_token
declare admin_token_argon2
declare log_level
declare request_size_limit
declare secret_key
#Declare to avoid return and Error messages
declare push_enabled
declare push_id
declare push_key
declare push_relay
declare push_identity_uri
declare ssh_keys
declare ssh_keys_option
# Set defaults
export DATA_FOLDER=/data
export ROCKET_PORT=80
export ROCKET_WORKERS=2
export ROCKET_ADDRESS=0.0.0.0

# Set a random secret, to remove confusing warning from logs.
secret_key=$(openssl rand -base64 32)
export ROCKET_SECRET_KEY="${secret_key}"

# Find the matching log level
if bashio::config.has_value 'log_level'; then
    case "$(bashio::string.lower "$(bashio::config 'log_level')")" in
        all|trace)
            log_level="trace"
            ;;
        debug)
            log_level="debug"
            ;;
        info|notice)
            log_level="info"
            ;;
        warning)
            log_level="warn"
            ;;
        error|fatal)
            log_level="error"
            ;;
        off)
            log_level="off"
            ;;
    esac

    export LOG_LEVEL="${log_level}"
fi

export LOG_FILE=/data/vaultwarden.log

# Show admin token in the log, if config does not exist.
if ! bashio::fs.file_exists '/data/config.json'; then
    admin_token=$(openssl rand -base64 48)
    admin_token_argon2=$(echo -n "$admin_token" | argon2 "$(openssl rand -base64 32)" -e -id -k 65540 -t 3 -p 4)
    export ADMIN_TOKEN="${admin_token_argon2}"

    bashio::log.info
    bashio::log.info
    bashio::log.info "READ THIS CAREFULLY! READ THIS CAREFULLY!"
    bashio::log.info
    bashio::log.info
    bashio::log.info "This is your temporary random admin token/password!"
    bashio::log.info
    #bashio::log.info "Debug only $admin_token_argon2"
    bashio::log.info "${admin_token}"
    bashio::log.info
    bashio::log.info "Be sure to change it in the admin panel, as soon as possible."
    bashio::log.info
    bashio::log.info "After you have changed ANY setting in the admin panel,"
    bashio::log.info "the add-on will NOT generate a new token on each start"
    bashio::log.info "and stops showing this message."
    bashio::log.info
fi

# API request size limit
if bashio::config.has_value 'request_size_limit'; then
    request_size_limit=$(bashio::config 'request_size_limit')
    export ROCKET_LIMITS="{json=${request_size_limit}}"
fi

#Enable Push from Config"
push_enabled=$(bashio::config 'push_enabled')
push_id="$(bashio::config 'push_id')"
push_key="$(bashio::config 'push_key')"

# Check if there is a config for the Push Server 
if bashio::config.has_value 'push_server'; then
    case "$(bashio::string.lower "$(bashio::config 'push_server')")" in
        eu)
            push_relay="https://api.bitwarden.eu"
            push_identity_uri="https://identity.bitwarden.eu"
            ;;
        us)
            push_relay="https://push.bitwarden.com"
            push_identity_uri="https://identity.bitwarden.com"
            ;;
    esac

    export PUSH_RELAY_URI="${push_relay}"
    export PUSH_IDENTITY_URI="${push_identity_uri}"
fi



export PUSH_ENABLED=$push_enabled
export PUSH_INSTALLATION_ID="${push_id}"
export PUSH_INSTALLATION_KEY="${push_key}"

ssh_keys=$(bashio::config 'ssh_keys')
#Enable or Disable SSH Agent and Keys
if [  $ssh_keys ]; then
echo "Enable SSH Features
ssh_keys_option="ssh-key-vault-item,ssh-agent"
export EXPERIMENTAL_CLIENT_FEATURE_FLAGS="${ssh_keys_option}"
fi

# Always enable Websockets
export WEBSOCKET_ENABLED=true
#export WEBSOCKET_PORT=8080 Works with port 80 now

# Run the Bitwarden server
bashio::log.info 'Starting the Vaultwarden server...'
cd /opt || bashio::exit.nok
exec ./vaultwarden
